// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  leader
  admin
  productor
}

enum Category {
  seminario_sanacion
  seminario_armadura
  seminario_como_vivir
  cartilla
  libro
}

enum OrderState {
  pending
  dispatched
  approved
  cancelled
  modified
}

model User {
  id           String         @id @unique @default(uuid())
  name         String
  email        String         @unique
  phone        String         @unique
  password     String
  city         String
  role         Role           @default(leader)
  Order        Order[]
  Notification Notification[]
}

model Sede {
  id          String      @id @default(uuid())
  city        String      @unique
  leader      String      @unique
  inventory   Inventory[]
  isPrincipal Boolean     @default(false)
  Order       Order[]
}

model Book {
  id        String      @id @unique @default(uuid())
  name      String      @unique
  category  Category
  inventory Inventory[]
  BookOrder BookOrder[]
}

model Inventory {
  id     String @id @default(uuid())
  sede   Sede   @relation(fields: [sedeId], references: [id], onDelete: Cascade)
  sedeId String

  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String

  criticalStock Int @default(0)
  lowStock      Int @default(0)
  stock         Int

  @@unique([sedeId, bookId])
}

model Order {
  id           String      @id @default(cuid())
  origin       Sede        @relation(fields: [originId], references: [id], onDelete: Cascade)
  originId     String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  detail       BookOrder[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  limitDate    DateTime?
  isProduction Boolean     @default(false)
  state        OrderState  @default(pending)
  note         String?
}

model BookOrder {
  id       String @id @default(uuid())
  quantity Int
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId   String
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  to        Role?    @default(admin) // Optional field to specify the recipient, if needed
}
